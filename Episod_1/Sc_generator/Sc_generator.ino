/*---------------------------------------------------------------------------------
 * Несколько генераторов данных с отправкой в ком-порт с целью тестирования
 * программ верхнего уровня
 * Выбор метода генерации устанвавливается с помощью джамперов на плате процессора
 ---------------------------------------------------------------------------------*/

#include "generator1.h"
#include "generator2.h"
#include "generator3.h"
#include "generator4.h"

#include <math.h>

//--- Общие константы -------------------------------------------------------------

#define VARIANT   4
#define LEDPIN    13
   
//=================================================================================

int ledPin = LEDPIN; 
int variant = VARIANT;


Generator_1  gen;
Generator_2  gen2;
Generator_3  gen3;
Generator_4  gen4;


void setup() 
{
  switch(variant)
  {
  case 1: gen.Init();   break;
  case 2: gen2.Init();  break;
  case 3: gen3.Init();  break;
  case 4: gen4.Init();  break;
  default: break;
  }
  
  pinMode(ledPin, OUTPUT);
}

void loop() 
{  
  switch(variant)
  {
    
  case 1: 
    //=================================================================================
    // Генератор-1
    // Генератор произвольного сигнала для тестирования программы приемной стороны
    // получили флоат значение, округлили к целому, записали в 16-ти битное число
    // и 2 байта записали в младшую часть массива из 4-х байт
    // Затем отправили 4 байта в uart
    // приемная сторона использует 2 нулевых байта для синхронизации
    //=================================================================================
    gen.Work(20);   
    break;
    
  case 2:
    //=================================================================================
    // Генератор-2
    // Генератор особого сигнала (Лазер) для тестирования программы приемной стороны
    // Парсинга данных смешанного формата
    // Также - генерация переменной в таком же смешанном формате
    //=================================================================================
    gen2.Work(10);
    break;
    
  case 3:
    //=================================================================================
    // Генератор-3
    // Генератор строки для тестирования программы приемной стороны
    //=================================================================================
    gen3.Work(100);
    break;

  case 4:
    //=================================================================================
    // Генератор-4
    // Генератор длинной строки для тестирования программы приемной стороны
    //=================================================================================
    gen4.Work(100);
    break;
    
  default: break; 
   
  }
  
}
