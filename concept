//=================================================================================
//--- Учебная система методики сравнительного изучения языков программирования для
//--- всякого рода embedded devices и компьютеров разной степени сложности
//--- Не претендует на руководство с подробными объяснениями по причине:
//---     главная цель - простое запоминание действий и методик работы (и все!)
//--- Некоторые дополнительные сведения по конкретным местам будут представлены
//--- ссылками на интернет-ресурсы. Там и можно будет найти все подробности.
//=================================================================================

//---------------------------------------------------------------------------------
//--- Не возможно без удивления наблюдать, как в сети, в статьях и книгах 
//--- начинающих (и не только..) программистов пытаются научить искусству
//--- разработки и программирования на изрядно надоевшем примере hello_world.
//---
//--- Объясняется это тем, что начать понимать можно только с такого примитива.
//--- Ну, ладно. Вчитались мы, поняли, а дальше что? 
//---
//--- А дальше - либо статейка закончилась, либо видео. 
//--- Еще хуже, когда после примитивного входа в мир программирования 
//--- нам сразу вываливают такие тексты и рассуждения, будто мы уже давно все знаем. 
//---
//--- Зачем тогда надо было рассусоливать Hеllo_World?
//---
//--- Поэтому, приходится рыскать по интернетам и собирать информацию, примеры.
//--- Есть конечно и хорошие книги и грамотные блогеры (воду не льющие), но.. 
//---
//--- Возникла идея построить из имеющихся плат, контроллеров, датчиков небольшую
//--- программно-аппаратную систему , чтобы на ней, как на стенде нарабатывать
//--- опыт, накапливать интересные решения для применения в дальнейшем. 
//---
//--- В общем, такая себе памятка.
//---------------------------------------------------------------------------------

//---------------------------------------------------------------------------------
//--- Пример стенда (из прошлых работ)
//--- http://y669805n.beget.tech/boards_4.php
//---
//---------------------------------------------------------------------------------

//---------------------------------------------------------------------------------
//--- Идея:
//---
//--- Сделать стенд из нескольких контроллеров и компьютеров, населить их 
//--- необходимым ПО и своими программами. На данном стенде можно будет, не особо 
//--- разбирая и пересобирая его перепрограммировать узлы, добиваясь стабильной 
//--- или новой работы узлов и ПО.
//--- После таких усовершенствований своих алгоритмов можно перенести их в 
//--- рабочий проект.
//--- Смысл основной - Все всегда под рукой и не требует переделок.
//--- Дополнительно можно подключить новые модули, если уж..
//---
//--- Построение системы можно начинать с любой комбинации аппаратных средств и
//--- с выбора любых известных (хорошо известных, или мало..) программных средств 
//--- программирования
//--- Конечно, Hello_World, думается, всеми освоен достаточно крепко.
//--- Тогда, на первый случай, 
//--- можно заняться программированием коммуникаций между имеющимися в наличие 
//--- контроллерами и ПК.
//--- Наверное лучше начать со связки uart<-->rs-232 или uart<-->usb(virtual Comm)
//--- Сразу появляется возможность и выводить результаты работы периферии на ПК 
//--- и управлять периферией с ПК по какому-либо протоколу, который, увы, 
//--- придется разработать или освоить готовый.
//--- Что же можно поставлять в виде данных на ПК? Да что угодно. 
//--- Можно генерировать данные программно. Всякие там: sin, cos.. 
//---------------------------------------------------------------------------------


//---------------------------------------------------------------------------------
//--- А теперь, запоздало, афоризм:
//--- «Нужно сперва ввязаться в бой, а там видно будет» - Наполеон Бонапарт 
//---------------------------------------------------------------------------------

//=================================================================================
//=== Ввязываемся.
//=================================================================================

//---------------------------------------------------------------------------------
//--- Предполагается использование таких языков и сред программирования:
//---------------------------------------------------------------------------------

/*
    C       ->  stm32
    C++     ->  atmega, raspberry, banana, pc
    rust    ->  raspberry, pc
    python  ->  esp32, raspberry, banana, pc
    lua     ->  esp8266, esp32  


IDE:
    code::blocks    ->  C/C++
    VSCode          ->  C/C++, python, rust,..
    Anjuta          ->  C/C++, python,.. 
    Cargo           ->  rust
*/


//--------------------------------------------------------------------------------- 
//--- Сам кластер возможен такой конфигурации (указаны связи): 
//---------------------------------------------------------------------------------   

/*
Claster: 
                esp8266                 esp32
                    ^                     ^                          
                    | h                   | k     
                    v                     v 
    {stm32 <--> raspberry <--> pc <--> banana <--> atmega}
       ^     e      ^      c   ^    d     ^    f      ^
       |            |   a      |          |       b   |  
       +-<------------------->-+-<------------------>-+  
                    |     g               |
                    +-<----------------->-+   
*/

//---------------------------------------------------------------------------------
//--- Расписаны возможные (как наиболее удобные) интерфейсы между компонентами
//---------------------------------------------------------------------------------

/*
Connect.
    a:  stm32       <--> pc         uart-usb, rs-485
    b:  atmega      <--> pc         uart-usb, rs-485
    c:  raspberry   <--> pc         tcp/ip
    d:  banana      <--> pc         tcp/ip
    e:  stm32       <--> raspberry  spi
    f:  atmega      <--> banana     spi
    g:  raspberry   <--> banana     tcp/ip
    h:  esp8266     <--> raspberry  wi-fi
    k:  esp32       <--> banana     wi-fi
*/

//---------------------------------------------------------------------------------
//--- Задачи:исходя из возможных комбинаций (датчиков и др. подключаемых устройств)
//---------------------------------------------------------------------------------

/*
Task.
    esp8266     [sens:{climat{T,P,H,speedWing,..},..]
    esp32       [sens:{climat{T,P,H,speedWing,..},..]
    stm32       [sens:{acc,giro,magn,adc{sound,I,U,T},climat{T,P,H},logic,..]   
    atmega      [sens:{climat{T,P,H},remote-T(ds18b20),gas},display,key,logic,..]
    raspberry   {comm:{rs-485,tcp/ip,..},prepare_data,logic,..}
    banana      {comm:{rs-485,tcp/ip,..},prepare_data,logic,..}
    pc          {comm:{rs-485,tcp/ip,..},macro_logic,outTo:{display,http,mqtt,..},..}
*/

//--------------------------------------------------------------------------------
//--- Все предлагаемое выше - лишь костяк для понимания сути вопроса:
//--- Как построить систему и начать ее населять всеми задумками?
//--- Я предложил свой вариант, но это не догма. 
//--------------------------------------------------------------------------------

//================================================================================
//=== Эпизоды
//================================================================================

//--------------------------------------------------------------------------------
//=== Episod_1: Построим простую связку между "atmega" и "PC" (PC и линукс Mint)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
//=== Episod_2: Построим связку Controller STM342F476 Nucleo-64 72 Mhz и 
//=== PC+Linux Mint+python
//=== Интерфейс PC USB(virtual Comm port)<-->USB.Uart переходник Nucleo-64
//=== ПО: PC: Modbus master (C),  Controller: Modbus slave (python+tkinter) 
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
//=== Episod_3: Построим связку Controller Arduino-Uno 16 Mhz и 
//=== PC+Linux Mint+(C++, либо Rust, либо python) Пока решается вопрос..
//=== Интерфейс PC USB(virtual Comm port)<-->USB.Uart
//=== ПО: PC: Modbus master (или просто командная строка?),  
//=== Controller: Modbus slave (или парсер командной строки) 
//--------------------------------------------------------------------------------

